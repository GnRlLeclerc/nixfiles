#!/usr/bin/env nu

def main [value: int] {
  # Config
  let values = 12
  let max_brightness = (brightnessctl max | str trim | into int)

  # Get the step argument
  let steps = ($value | into float)

  if $steps == 0 {
    exit 0
  }

  # Get current brightness
  let current = (brightnessctl get | str trim | into float)

  # Easing and inverse easing
  def easing [x: float] {
    $x * $x
  }

  def inverse [y: float] {
    $y | math sqrt
  }

  # Normalize
  let current_normalized = $current / $max_brightness
  let x = if $current <= 0 {
    0
  } else {
    inverse $current_normalized
  }

  let delta = $steps / ($values - 1)

  # Compute new x
  let x = $x + $delta
  let x = if $x < 0 { 0 } else if $x > 1 { 1 } else { $x }

  # New brightness value
  let y = easing $x
  let brightness = $y * $max_brightness
  let rounded = ($brightness + 0.5) | math floor

  brightnessctl set $rounded
}
